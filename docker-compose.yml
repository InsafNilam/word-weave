services:
  # PostgreSQL Database for Post Service
  post-db:
    image: postgres:17.5-alpine
    container_name: post-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    restart: always
    volumes:
      - post_db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 10s
      timeout: 5s
      retries: 3

  # SurrealDB for Like Service
  like_db:
    image: surrealdb/surrealdb:v2.3.7
    container_name: like-db
    env_file:
      - .env
    entrypoint:
      - /surreal
      - start
      - --log
      - trace
      - --auth
      - --user
      - $SURREAL_DB_USER
      - --pass
      - $SURREAL_DB_PASSWORD
      - rocksdb:/data/likes.db
    restart: always
    volumes:
      - like_db_data:/data
    ports:
      - "8000:8000"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "$SURREAL_HEALTH_CHECK_URL"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB for User Service
  user-db:
    image: mongo
    container_name: user-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    restart: always
    volumes:
      - user_db_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  comment-db:
    image: mysql:8.4.6
    container_name: comment-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
     - "3306:3306"
    volumes:
      - comment_db_data:/var/lib/mysql
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "comment-db", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 1m30s
      timeout: 30s
      retries: 3
      start_period: 30s

    redis:
      image: redis:7.4.5-alpine
      container_name: redis
      restart: always
      ports:
        - "6379:6379"
      command: ["redis-server", "--appendonly", "yes"]
      volumes:
        - redis_data:/data
      networks:
        - microservices-network
      healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 10s
        timeout: 5s
        retries: 3
  
    rabbitmq:
      image: rabbitmq:4-management
      container_name: rabbitmq
      restart: always
      ports:
        - "5672:5672"
        - "15672:15672"
      networks:
        - microservices-network
      healthcheck:
        test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
        interval: 30s
        timeout: 10s
        retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    environment:
      - PORT=${PORT}
      - POST_SERVICE_ADDR=${POST_SERVICE_ADDR}
      - USER_SERVICE_ADDR=${USER_SERVICE_ADDR}
      - LIKE_SERVICE_ADDR=${LIKE_SERVICE_ADDR}
      - COMMENT_SERVICE_ADDR=${COMMENT_SERVICE_ADDR}
      - CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
    ports:
      - "8080:8080"
    depends_on:
      - user-service
      - post-service
      - like-service
      - comment-service
    networks:
      - microservices-network
    restart: unless-stopped
  
  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      - CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - GRPC_PORT=50051
    ports:
      - "50051:50051"
    networks:
      - microservices-network
    restart: unless-stopped

  # Post Service
  post-service:
    build:
      context: ./post-service
      dockerfile: Dockerfile
    container_name: post-service
    environment:
      - DB_HOST=post-db
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - GRPC_PORT=50052
      - USER_SERVICE_ADDR=${USER_SERVICE_ADDR}
    ports:
      - "50052:50052"
    depends_on:
      post-db:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
  
  # Like Service
  like-service:
    build:
      context: ./like-service
      dockerfile: Dockerfile
    container_name: like-service
    environment:
      - SURREAL_DB_USER=${SURREAL_DB_USER}
      - SURREAL_DB_PASSWORD=${SURREAL_DB_PASSWORD}
      - SURREAL_HEALTH_CHECK_URL=http://like-db:8000/health
      - DATABASE_URL=${DATABASE_URL}
      - GRPC_PORT=50053
    ports:
      - "50053:50053"
    depends_on:
      like-db:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  # Comment Service
  comment-service:
    build:
      context: ./comment-service
      dockerfile: Dockerfile
    container_name: comment-service
    environment:
      - DB_HOST=post-db
      - DB_PORT=5432
      - DB_USER=postuser
      - DB_PASSWORD=postpass
      - DB_NAME=postdb
      - GRPC_PORT=50054
      - USER_SERVICE_ADDR=user-service:50051
    ports:
      - "50054:50054"
    depends_on:
      post-db:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

volumes:
  post_db_data:
    driver: local
  like_db_data:
    driver: local
  user_db_data:
    driver: local
  comment_db_data:
    driver: local
  redis_data:
    driver: local

networks:
  microservices-network:
    driver: bridge