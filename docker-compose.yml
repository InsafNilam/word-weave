services:
  # PostgreSQL Database for Post Service and Event Service
  post-db:
    image: postgres:17.5-alpine
    container_name: post-db
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    restart: always
    volumes:
      - post_db_data:/var/lib/postgresql/data
    expose:
      - "5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # SurrealDB for Like Service
  like-db:
    image: surrealdb/surrealdb:v2.3.7
    user: root
    container_name: like-db
    env_file:
      - .env
    entrypoint:
      - /surreal
      - start
      - --log
      - trace
      - --user
      - $SURREAL_DB_USER
      - --pass
      - $SURREAL_DB_PASSWORD
      - --bind=0.0.0.0:8000
      - $SURREAL_DATABASE_URL
    restart: always
    volumes:
      - like_db_data:/data
    expose:
      - "8000"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "/surreal", "isready"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # MongoDB for User Service
  user-db:
    image: mongo
    container_name: user-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: user_db
    restart: always
    volumes:
      - user_db_data:/data/db
      - ./config/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    expose:
      - "27017"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "mongosh --eval 'db.adminCommand(\"ping\")' --quiet || mongo --eval 'db.adminCommand(\"ping\")' --quiet"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
  
  # MySQL Database for Comment Service
  comment-db:
    image: mysql:8.4.6
    container_name: comment-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    expose:
     - "3306"
    volumes:
      - comment_db_data:/var/lib/mysql
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "comment-db", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 1m30s
      timeout: 30s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  redis:
    image: redis:7.4.5-alpine
    container_name: redis
    restart: always
    expose:
      - "6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
  
  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    restart: always
    environment:
    - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
    - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    ports:
      - "15672:15672"
    expose:
      - "5672"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Word Weave Frontend
  word-weave:
    build:
      context: ./frontend-service
      dockerfile: Dockerfile
    container_name: word-weave
    environment:
      ASSET_DIR: /var/www/html
      APP_PREFIX: PREFIX_
      PREFIX_API_URL : http://api-gateway:8080
      PREFIX_IK_URL_ENDPOINT : ${IMAGEKIT_URL_ENDPOINT}
      PREFIX_IK_PUBLIC_KEY : ${IMAGEKIT_PUBLIC_KEY}
      PREFIX_CLERK_PUBLISHABLE_KEY : ${CLERK_PUBLISHABLE_KEY}
    ports:
      - "5173:5173"
    networks:
      - microservices-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    environment:
      - PORT=${API_PORT}
      - CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - POST_SERVICE_HOST=${POST_SERVICE_ADDR}
      - USER_SERVICE_HOST=${USER_SERVICE_ADDR}
      - LIKE_SERVICE_HOST=${LIKE_SERVICE_ADDR}
      - COMMENT_SERVICE_HOST=${COMMENT_SERVICE_ADDR}
      - EVENT_SERVICE_HOST=${EVENT_SERVICE_ADDR}
      - MEDIA_SERVICE_HOST=${MEDIA_SERVICE_ADDR}
    ports:
      - "8080:8080"
    depends_on:
      - user-service
      - post-service
      - like-service
      - comment-service
      - event-service
      - media-service
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
  
  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      - CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - CLERK_WEBHOOK_SIGNING_SECRET=${CLERK_WEBHOOK_SIGNING_SECRET}
      - GRPC_PORT=50051
      - WEBHOOK_PORT=${WEBHOOK_PORT}
      - WEBHOOK_HOST=${WEBHOOK_HOST}
      - MONGO_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@user-db:27017/user_db
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - EVENT_SERVICE_HOST=${EVENT_SERVICE_ADDR}
    expose:
      - "50051"
    depends_on:
      user-db:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=:50051"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Post Service
  post-service:
    build:
      context: ./post-service
      dockerfile: Dockerfile
    container_name: post-service
    environment:
      - DB_HOST=post-db
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=post_db
      - GRPC_PORT=50052
      - USER_SERVICE_ADDRESS=${USER_SERVICE_ADDR}
      - EVENT_SERVICE_ADDRESS=${EVENT_SERVICE_ADDR}
    expose:
      - "50052"
    depends_on:
      post-db:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=:50052"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
  
  # Like Service
  like-service:
    build:
      context: ./like-service
      dockerfile: Dockerfile
    container_name: like-service
    environment:
      - DB_USER=${SURREAL_DB_USER}
      - DB_PASSWORD=${SURREAL_DB_PASSWORD}
      - DATABASE_URL=ws://like-db:8000/rpc
      - SURREAL_HEALTH_CHECK_URL=http://like-db:8000/health
      - USER_SERVICE_URL=http://${USER_SERVICE_ADDR}
      - POST_SERVICE_URL=http://${POST_SERVICE_ADDR}
      - HOST=0.0.0.0
      - PORT=50053
      # Environment
      - ENVIRONMENT=development

      # Logging
      - LOG_LEVEL=debug
      - RUST_LOG=likes_service=debug,tonic=debug
    expose:
      - "50053"
    # command: [ "sleep", "infinity" ]
    depends_on:
      like-db:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=:50053"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Comment Service
  comment-service:
    build:
      context: ./comment-service
      dockerfile: Dockerfile
    container_name: comment-service
    environment:
      - CONNECTIONSTRINGS__DEFAULTCONNECTION=${CONNECTIONSTRINGS__DEFAULTCONNECTION}
      - CONNECTIONSTRINGS__REDIS=${CONNECTIONSTRINGS__REDIS}
      - GRPCSETTINGS__USERSERVICEURL=${USER_SERVICE_ADDR}
      - GRPCSETTINGS__POSTSERVICEURL=${POST_SERVICE_ADDR}
      - GRPCSETTINGS__EVENTSERVICEURL=${EVENT_SERVICE_ADDR}
      - KESTREL__ENDPOINTS__GRPC__URL=http://0.0.0.0:50054
    expose:
      - "50054"
    depends_on:
      comment-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=:50054"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
  
  event-service:
    build:
      context: ./event-service
      dockerfile: Dockerfile
    container_name: event-service
    environment:
      DB_HOST: post-db
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: event_db
      USER_SERVICE_HOST: user-service
      USER_SERVICE_PORT: 50051
      POST_SERVICE_HOST: post-service
      POST_SERVICE_PORT: 50052
      REDIS_URL: redis://redis:6379
      DATABASE_URL: ${EVENT_DATABASE_URL}
      RABBITMQ_URL: ${RABBITMQ_URL}
      GRPC_PORT: 50055
    expose:
      - "50055"
    depends_on:
      post-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    command: ["bundle", "exec", "ruby", "lib/main.rb", "server"]
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=:50055"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  event-consumer:
    build:
      context: ./event-service
      dockerfile: Dockerfile
    container_name: event-consumer
    environment:
      DB_HOST: post-db
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: event_db
      USER_SERVICE_HOST: user-service
      USER_SERVICE_PORT: 50051
      POST_SERVICE_HOST: post-service
      POST_SERVICE_PORT: 50052
      REDIS_URL: redis://redis:6379
      DATABASE_URL: ${EVENT_DATABASE_URL}
      RABBITMQ_URL: ${RABBITMQ_URL}
      GRPC_PORT: 50055
    expose:
      - "50055"
    depends_on:
      post-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    command: ["bundle", "exec", "ruby", "lib/main.rb", "consumer"]
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  dead-letter-handler:
    build:
      context: ./event-service
      dockerfile: Dockerfile
    container_name: dead-letter-handler
    environment:
      DB_HOST: post-db
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: event_db
      USER_SERVICE_HOST: user-service
      USER_SERVICE_PORT: 50051
      POST_SERVICE_HOST: post-service
      POST_SERVICE_PORT: 50052
      REDIS_URL: redis://redis:6379
      DATABASE_URL: ${EVENT_DATABASE_URL}
      RABBITMQ_URL: ${RABBITMQ_URL}
    depends_on:
      post-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    command: ["bundle", "exec", "ruby", "lib/main.rb", "dead_letter"]
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  media-service:
    build:
      context: ./media-service
      dockerfile: Dockerfile
    container_name: media-service
    expose:
      - "50056"
    environment:
      # ImageKit Configuration
      - IK_PRIVATE_KEY=${IMAGEKIT_PRIVATE_KEY}
      - IK_PUBLIC_KEY=${IMAGEKIT_PUBLIC_KEY}
      - IK_URL_ENDPOINT=${IMAGEKIT_URL_ENDPOINT}
      
      # gRPC Configuration
      - GRPC_PORT=50056
      - GRPC_HOST=0.0.0.0
      - MAX_WORKERS=10
      
      # Application Configuration
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - ENVIRONMENT=production
      - APP_NAME=media-service
      
      # Limits
      - MAX_FILE_SIZE_MB=100
      - MAX_FILES_PER_BATCH_DELETE=100
    volumes:
      - media_data:/app/media/logs
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=:50056"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  post_db_data:
    driver: local
  like_db_data:
    driver: local
  user_db_data:
    driver: local
  comment_db_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  media_data:
    driver: local

networks:
  microservices-network:
    driver: bridge