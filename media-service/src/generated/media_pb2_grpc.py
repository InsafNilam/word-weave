# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import media_pb2 as media__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in media_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MediaServiceStub(object):
    """Media Service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUploadAuth = channel.unary_unary(
                '/media.MediaService/GetUploadAuth',
                request_serializer=media__pb2.GetUploadAuthRequest.SerializeToString,
                response_deserializer=media__pb2.GetUploadAuthResponse.FromString,
                _registered_method=True)
        self.GetFileDetails = channel.unary_unary(
                '/media.MediaService/GetFileDetails',
                request_serializer=media__pb2.GetFileDetailsRequest.SerializeToString,
                response_deserializer=media__pb2.GetFileDetailsResponse.FromString,
                _registered_method=True)
        self.GetFiles = channel.unary_unary(
                '/media.MediaService/GetFiles',
                request_serializer=media__pb2.GetFilesRequest.SerializeToString,
                response_deserializer=media__pb2.GetFilesResponse.FromString,
                _registered_method=True)
        self.DeleteFile = channel.unary_unary(
                '/media.MediaService/DeleteFile',
                request_serializer=media__pb2.DeleteFileRequest.SerializeToString,
                response_deserializer=media__pb2.DeleteFileResponse.FromString,
                _registered_method=True)
        self.DeleteMultipleFiles = channel.unary_unary(
                '/media.MediaService/DeleteMultipleFiles',
                request_serializer=media__pb2.DeleteMultipleFilesRequest.SerializeToString,
                response_deserializer=media__pb2.DeleteMultipleFilesResponse.FromString,
                _registered_method=True)
        self.UploadFile = channel.unary_unary(
                '/media.MediaService/UploadFile',
                request_serializer=media__pb2.UploadFileRequest.SerializeToString,
                response_deserializer=media__pb2.UploadFileResponse.FromString,
                _registered_method=True)
        self.UpdateFileDetails = channel.unary_unary(
                '/media.MediaService/UpdateFileDetails',
                request_serializer=media__pb2.UpdateFileDetailsRequest.SerializeToString,
                response_deserializer=media__pb2.UpdateFileDetailsResponse.FromString,
                _registered_method=True)


class MediaServiceServicer(object):
    """Media Service definition
    """

    def GetUploadAuth(self, request, context):
        """Get authentication parameters for ImageKit
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFileDetails(self, request, context):
        """Get file details by file ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFiles(self, request, context):
        """Get list of files with optional filters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFile(self, request, context):
        """Delete a single file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMultipleFiles(self, request, context):
        """Delete multiple files
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadFile(self, request, context):
        """Upload file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateFileDetails(self, request, context):
        """Update file details
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MediaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUploadAuth': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUploadAuth,
                    request_deserializer=media__pb2.GetUploadAuthRequest.FromString,
                    response_serializer=media__pb2.GetUploadAuthResponse.SerializeToString,
            ),
            'GetFileDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFileDetails,
                    request_deserializer=media__pb2.GetFileDetailsRequest.FromString,
                    response_serializer=media__pb2.GetFileDetailsResponse.SerializeToString,
            ),
            'GetFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFiles,
                    request_deserializer=media__pb2.GetFilesRequest.FromString,
                    response_serializer=media__pb2.GetFilesResponse.SerializeToString,
            ),
            'DeleteFile': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFile,
                    request_deserializer=media__pb2.DeleteFileRequest.FromString,
                    response_serializer=media__pb2.DeleteFileResponse.SerializeToString,
            ),
            'DeleteMultipleFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMultipleFiles,
                    request_deserializer=media__pb2.DeleteMultipleFilesRequest.FromString,
                    response_serializer=media__pb2.DeleteMultipleFilesResponse.SerializeToString,
            ),
            'UploadFile': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadFile,
                    request_deserializer=media__pb2.UploadFileRequest.FromString,
                    response_serializer=media__pb2.UploadFileResponse.SerializeToString,
            ),
            'UpdateFileDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateFileDetails,
                    request_deserializer=media__pb2.UpdateFileDetailsRequest.FromString,
                    response_serializer=media__pb2.UpdateFileDetailsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'media.MediaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('media.MediaService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MediaService(object):
    """Media Service definition
    """

    @staticmethod
    def GetUploadAuth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/media.MediaService/GetUploadAuth',
            media__pb2.GetUploadAuthRequest.SerializeToString,
            media__pb2.GetUploadAuthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFileDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/media.MediaService/GetFileDetails',
            media__pb2.GetFileDetailsRequest.SerializeToString,
            media__pb2.GetFileDetailsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/media.MediaService/GetFiles',
            media__pb2.GetFilesRequest.SerializeToString,
            media__pb2.GetFilesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/media.MediaService/DeleteFile',
            media__pb2.DeleteFileRequest.SerializeToString,
            media__pb2.DeleteFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMultipleFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/media.MediaService/DeleteMultipleFiles',
            media__pb2.DeleteMultipleFilesRequest.SerializeToString,
            media__pb2.DeleteMultipleFilesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/media.MediaService/UploadFile',
            media__pb2.UploadFileRequest.SerializeToString,
            media__pb2.UploadFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateFileDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/media.MediaService/UpdateFileDetails',
            media__pb2.UpdateFileDetailsRequest.SerializeToString,
            media__pb2.UpdateFileDetailsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
